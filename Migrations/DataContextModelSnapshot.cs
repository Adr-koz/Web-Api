// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApiApp.Data;

#nullable disable

namespace WebApiApp.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PublisherTitle", b =>
                {
                    b.Property<int>("PublishersId")
                        .HasColumnType("int");

                    b.Property<int>("TitlesId")
                        .HasColumnType("int");

                    b.HasKey("PublishersId", "TitlesId");

                    b.HasIndex("TitlesId");

                    b.ToTable("PublisherTitle");
                });

            modelBuilder.Entity("WebApiApp.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("WebApiApp.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("WebApiApp.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("WebApiApp.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookTitleId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookTitleId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WebApiApp.Models.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("WebApiApp.Models.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ReviewId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("WebApiApp.Models.TitleAuthor", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("TitleId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("TitleAuthors");
                });

            modelBuilder.Entity("WebApiApp.Models.TitleGenre", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("TitleId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("TitleGenres");
                });

            modelBuilder.Entity("WebApiApp.Models.TitlePublisher", b =>
                {
                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("TitleId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("TitlePublishers");
                });

            modelBuilder.Entity("PublisherTitle", b =>
                {
                    b.HasOne("WebApiApp.Models.Publisher", null)
                        .WithMany()
                        .HasForeignKey("PublishersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Title", null)
                        .WithMany()
                        .HasForeignKey("TitlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiApp.Models.Publisher", b =>
                {
                    b.HasOne("WebApiApp.Models.Genre", null)
                        .WithMany("Publishers")
                        .HasForeignKey("GenreId");
                });

            modelBuilder.Entity("WebApiApp.Models.Review", b =>
                {
                    b.HasOne("WebApiApp.Models.Author", null)
                        .WithMany("Reviews")
                        .HasForeignKey("AuthorId");

                    b.HasOne("WebApiApp.Models.Title", "BookTitle")
                        .WithMany("Reviews")
                        .HasForeignKey("BookTitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebApiApp.Models.Title", b =>
                {
                    b.HasOne("WebApiApp.Models.Author", "Author")
                        .WithMany("Titles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Genre", "Genre")
                        .WithMany("Titles")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("WebApiApp.Models.TitleAuthor", b =>
                {
                    b.HasOne("WebApiApp.Models.Author", "Author")
                        .WithMany("TitleAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Title", "BookTitle")
                        .WithMany("TitleAuthors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookTitle");
                });

            modelBuilder.Entity("WebApiApp.Models.TitleGenre", b =>
                {
                    b.HasOne("WebApiApp.Models.Genre", "GenreName")
                        .WithMany("TitleGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Title", "BookTitle")
                        .WithMany("TitleGenres")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");

                    b.Navigation("GenreName");
                });

            modelBuilder.Entity("WebApiApp.Models.TitlePublisher", b =>
                {
                    b.HasOne("WebApiApp.Models.Publisher", "PublisherName")
                        .WithMany("TitlePublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiApp.Models.Title", "BookTitle")
                        .WithMany("TitlePublishers")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookTitle");

                    b.Navigation("PublisherName");
                });

            modelBuilder.Entity("WebApiApp.Models.Author", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TitleAuthors");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("WebApiApp.Models.Genre", b =>
                {
                    b.Navigation("Publishers");

                    b.Navigation("TitleGenres");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("WebApiApp.Models.Publisher", b =>
                {
                    b.Navigation("TitlePublishers");
                });

            modelBuilder.Entity("WebApiApp.Models.Reviewer", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApiApp.Models.Title", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("TitleAuthors");

                    b.Navigation("TitleGenres");

                    b.Navigation("TitlePublishers");
                });
#pragma warning restore 612, 618
        }
    }
}
